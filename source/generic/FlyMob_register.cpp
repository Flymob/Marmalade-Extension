/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "FlyMob_autodefs.h"
#include "s3eEdk.h"
#include "FlyMob.h"
//Declarations of Init and Term functions
extern s3eResult FlyMobInit();
extern void FlyMobTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_TVOS ||defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eFlyMobInterstitialInitialize_wrap(const int zoneID)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobInterstitialInitialize"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobInterstitialInitialize, 1, zoneID);
}
static void s3eFlyMobInterstitialLoad_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobInterstitialLoad"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobInterstitialLoad, 0);
}
static void s3eFlyMobInterstitialShow_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobInterstitialShow"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobInterstitialShow, 0);
}
static bool s3eFlyMobInterstitialIsReady_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobInterstitialIsReady"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobInterstitialIsReady, 0);
}
static void s3eFlyMobRewardedVideoInitialize_wrap(const int zoneID)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobRewardedVideoInitialize"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobRewardedVideoInitialize, 1, zoneID);
}
static void s3eFlyMobRewardedVideoLoad_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobRewardedVideoLoad"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobRewardedVideoLoad, 0);
}
static void s3eFlyMobRewardedVideoShow_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobRewardedVideoShow"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobRewardedVideoShow, 0);
}
static bool s3eFlyMobRewardedVideoIsReady_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobRewardedVideoIsReady"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobRewardedVideoIsReady, 0);
}
static void s3eFlyMobSDKSetDebugMode_wrap(bool isDebug)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKSetDebugMode"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKSetDebugMode, 1, isDebug);
}
static bool s3eFlyMobSDKIsDebugMode_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKIsDebugMode"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKIsDebugMode, 0);
}
static void s3eFlyMobSDKSetCoppa_wrap(bool isCoppa)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKSetCoppa"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKSetCoppa, 1, isCoppa);
}
static bool s3eFlyMobSDKIsCoppa_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKIsCoppa"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKIsCoppa, 0);
}
static void s3eFlyMobSDKSetDnt_wrap(bool isDnt)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKSetDnt"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKSetDnt, 1, isDnt);
}
static bool s3eFlyMobSDKIsDnt_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKIsDnt"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKIsDnt, 0);
}
static void s3eFlyMobSDKSetTesting_wrap(bool isTesting)
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKSetTesting"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKSetTesting, 1, isTesting);
}
static bool s3eFlyMobSDKIsTesting_wrap()
{
    IwTrace(FLYMOB_VERBOSE, ("calling FlyMob func on main thread: s3eFlyMobSDKIsTesting"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eFlyMobSDKIsTesting, 0);
}
#define s3eFlyMobInterstitialInitialize s3eFlyMobInterstitialInitialize_wrap

#define s3eFlyMobInterstitialLoad s3eFlyMobInterstitialLoad_wrap

#define s3eFlyMobInterstitialShow s3eFlyMobInterstitialShow_wrap

#define s3eFlyMobInterstitialIsReady s3eFlyMobInterstitialIsReady_wrap

#define s3eFlyMobRewardedVideoInitialize s3eFlyMobRewardedVideoInitialize_wrap

#define s3eFlyMobRewardedVideoLoad s3eFlyMobRewardedVideoLoad_wrap

#define s3eFlyMobRewardedVideoShow s3eFlyMobRewardedVideoShow_wrap

#define s3eFlyMobRewardedVideoIsReady s3eFlyMobRewardedVideoIsReady_wrap

#define s3eFlyMobSDKSetDebugMode s3eFlyMobSDKSetDebugMode_wrap

#define s3eFlyMobSDKIsDebugMode s3eFlyMobSDKIsDebugMode_wrap

#define s3eFlyMobSDKSetCoppa s3eFlyMobSDKSetCoppa_wrap

#define s3eFlyMobSDKIsCoppa s3eFlyMobSDKIsCoppa_wrap

#define s3eFlyMobSDKSetDnt s3eFlyMobSDKSetDnt_wrap

#define s3eFlyMobSDKIsDnt s3eFlyMobSDKIsDnt_wrap

#define s3eFlyMobSDKSetTesting s3eFlyMobSDKSetTesting_wrap

#define s3eFlyMobSDKIsTesting s3eFlyMobSDKIsTesting_wrap


#endif

void FlyMobRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[16];
    funcPtrs[0] = (void*)s3eFlyMobInterstitialInitialize;
    funcPtrs[1] = (void*)s3eFlyMobInterstitialLoad;
    funcPtrs[2] = (void*)s3eFlyMobInterstitialShow;
    funcPtrs[3] = (void*)s3eFlyMobInterstitialIsReady;
    funcPtrs[4] = (void*)s3eFlyMobRewardedVideoInitialize;
    funcPtrs[5] = (void*)s3eFlyMobRewardedVideoLoad;
    funcPtrs[6] = (void*)s3eFlyMobRewardedVideoShow;
    funcPtrs[7] = (void*)s3eFlyMobRewardedVideoIsReady;
    funcPtrs[8] = (void*)s3eFlyMobSDKSetDebugMode;
    funcPtrs[9] = (void*)s3eFlyMobSDKIsDebugMode;
    funcPtrs[10] = (void*)s3eFlyMobSDKSetCoppa;
    funcPtrs[11] = (void*)s3eFlyMobSDKIsCoppa;
    funcPtrs[12] = (void*)s3eFlyMobSDKSetDnt;
    funcPtrs[13] = (void*)s3eFlyMobSDKIsDnt;
    funcPtrs[14] = (void*)s3eFlyMobSDKSetTesting;
    funcPtrs[15] = (void*)s3eFlyMobSDKIsTesting;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[16] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("FlyMob", funcPtrs, sizeof(funcPtrs), flags, FlyMobInit, FlyMobTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int FlyMobStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&FlyMobRegisterExt;
    return 0;
}

int g_FlyMobVal = FlyMobStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    FlyMobRegisterExt();
}
#endif

#endif
